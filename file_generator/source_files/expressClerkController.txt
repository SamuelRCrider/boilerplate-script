// userController.ts
import { PrismaClient } from '@prisma/client';
import { Request, Response } from 'express';

const prisma = new PrismaClient();

export const userController = {
  getCurrentUser: async (req: Request, res: Response) => {
    try {
      const user = await prisma.user.findUnique({
        where: { clerkId: req.auth.userId }
      });
      res.json(user);
    } catch (error) {
      console.error('Error getting current user:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  },

  createOrUpdateUser: async (req: Request, res: Response) => {
    try {
      const user = await prisma.user.upsert({
        where: { clerkId: req.auth.userId },
        update: {
          email: req.body.email,
          name: req.body.name,
        },
        create: {
          clerkId: req.auth.userId,
          email: req.body.email,
          name: req.body.name,
        },
      });
      res.json(user);
    } catch (error) {
      console.error('Error creating/updating user:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  },

  updateUser: async (req: Request, res: Response) => {
    try {
      const user = await prisma.user.update({
        where: { clerkId: req.auth.userId },
        data: {
          email: req.body.email,
          name: req.body.name,
        },
      });
      res.json(user);
    } catch (error) {
      console.error('Error updating user:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  },
};